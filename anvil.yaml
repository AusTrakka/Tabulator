services: []
startup: {type: form, module: Form2}
package_name: Tabulator
allow_embedding: false
name: Tabulator
runtime_options: {version: 2, client_version: '3', server_version: python3-sandbox}
metadata: {}
startup_form: Tabulator
native_deps: {head_html: "\n<link href=\"https://unpkg.com/tabulator-tables@4.5.3/dist/css/materialize/tabulator_materialize.min.css\"\
    \ rel=\"stylesheet\">\n<script type=\"text/javascript\" src=\"https://unpkg.com/tabulator-tables@4.5.3/dist/js/tabulator.min.js\"\
    ></script>\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js\"\
    ></script>\n<script type=\"text/javascript\" src=\"https://unpkg.com/tabulator-tables@4.5.3/dist/js/jquery_wrapper.min.js\"\
    ></script>\n\n<script>\n\nfunction find_table(self){\n  console.log(Tabulator.prototype.findTable(self.v._anvil.element[0]));\n\
    \  table = Tabulator.prototype.findTable(self.v._anvil.element[0])[0];\n  return\
    \ table\n}\n\nfunction create_table(\n    self,\n    auto_columns,\n    header_align,\n\
    \    header_visible,\n    index,\n    layout,\n    moveable_columns,\n    pagination,\n\
    \    pagination_button_count,\n    pagination_size,\n    pagination_size_selector,\n\
    \    resizable_columns,\n    row_selectable\n) {\n    self = self.v._anvil.element[0];\n\
    \n    new Tabulator(self, {\n        autoColumns: auto_columns,\n        headerAlign:\
    \ header_align,\n        headerVisible: header_visible,\n        height: height,\n\
    \        index: index,\n        layoutColumnsOnNewData: true,\n        layout:\
    \ layout,\n        moveableColumns: moveable_columns,\n        pagination: pagination,\n\
    \        paginationButtonCount: pagination_button_count,\n        paginationSize:\
    \ pagination_size,\n        paginationSizeSelector: pagination_size_selector,\n\
    \        resizableColumns: resizable_columns,\n        rowSelectable: row_selectable,\n\
    \        rowSelected: function (row) {\n            anvil.call(self, \"row_selected\"\
    , row.getData());\n        },\n        rowClick: function (e, row) {\n       \
    \     anvil.call(self, \"row_click\", row.getData());\n        },\n        cellEdited:\
    \ function (cell) {\n            console.log(cell);\n        }\n    });\n}\n \
    \ \nfunction set_data(self, data) {\n  table = find_table(self);\n  table.updateOrAddData(data);\n\
    };\n  \nfunction set_columns(self, columns) {\n  for (let i=0; i<columns.length;\
    \ i++){\n    if (columns[i]['editor'] == 'dateEditor') {\n      columns[i]['editor']\
    \ = dateEditor;\n    }\n  }\n  table = find_table(self);\n  table.setColumns(columns);\n\
    };\n  \nfunction add_row(self, row, top, pos) {\n  \ttable = find_table(self);\n\
    \ \ttable.addRow(row, top, pos);\n};\n\nfunction set_height(self, height) {\n\
    \  table = find_table(self);\n  table.setHeight(height);\n};\n  \nfunction set_group_by(self,\
    \ field) {\n  table = find_table(self);\n  table.setGroupBy(field);\n}\n  \nfunction\
    \ redraw(self, data) {\n  table = find_table(self);\n  table.redraw();\n}\n\n\
    \  function explore(me){console.log(me)}\n</script>\n\n\n<script>\n    var dateEditor\
    \ = function(cell, onRendered, success, cancel, editorParams){\n    //cell - the\
    \ cell component for the editable cell\n    //onRendered - function to call when\
    \ the editor has been rendered\n    //success - function to call to pass the successfuly\
    \ updated value to Tabulator\n    //cancel - function to call to abort the edit\
    \ and return to a normal cell\n    //editorParams - params object passed into\
    \ the editorParams column definition property\n\n    //create and style editor\n\
    \    var editor = document.createElement(\"input\");\n\n    editor.setAttribute(\"\
    type\", \"date\");\n\n    //create and style input\n    editor.style.padding =\
    \ \"3px\";\n    editor.style.width = \"100%\";\n    editor.style.boxSizing = \"\
    border-box\";\n      $(editor).addClass('datepicker')\n\n    //Set value of editor\
    \ to the current value of the cell\n    editor.value = moment(cell.getValue(),\
    \ \"DD/MM/YYYY\").format(\"YYYY-MM-DD\")\n\n    //set focus on the select box\
    \ when the editor is selected (timeout allows for editor to be added to DOM)\n\
    \    onRendered(function(){\n        editor.focus();\n        editor.style.css\
    \ = \"100%\";\n    });\n\n    //when the value has been set, trigger the cell\
    \ to update\n    function successFunc(){\n      console.log(editor.value)\n  \
    \    if (editor.value){\n        success(moment(editor.value, \"YYYY-MM-DD\").format(\"\
    DD/MM/YYYY\"));\n      }\n      else{\n        cancel()\n      }\n    }\n\t\n\
    \    \n    \n    //editor.addEventListener(\"change\", successFunc);\n    editor.addEventListener(\"\
    blur\", successFunc);\n\n    //return the editor element\n    return editor;\n\
    };\n</script>"}
dependency_order: []
dependency_code: {}
renamed: true
