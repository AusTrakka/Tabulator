services: []
startup: {type: form, module: Tabulator}
package_name: Tabulator
allow_embedding: false
name: Tabulator
runtime_options: {version: 2, client_version: '3', server_version: python3-full}
metadata: {}
native_deps: {head_html: "<link href=\"https://unpkg.com/tabulator-tables@4.5.3/dist/css/bootstrap/tabulator_bootstrap.min.css\"\
    \ rel=\"stylesheet\">\n<script type=\"text/javascript\" src=\"https://unpkg.com/tabulator-tables@4.5.3/dist/js/tabulator.min.js\"\
    ></script>\n\n<script>\n// enhancments\n//rowSelectionDisplay column formatter\n\
    Tabulator.prototype.moduleBindings.format.prototype.formatters.rowSelectionDisplay=function(e){var\
    \ t=this,o=document.createElement(\"input\");if(o.type=\"checkbox\",this.table.modExists(\"\
    selectRow\",!0))if(o.addEventListener(\"click\",function(e){e.stopPropagation()}),\"\
    function\"==typeof e.getRow){var l=e.getRow();o.addEventListener(\"change\",function(e){l.toggleSelect()}),o.checked=l.isSelected(),this.table.modules.selectRow.registerRowSelectCheckbox(l,o)}else\
    \ o.addEventListener(\"change\",function(e){t.table.modules.selectRow.selectedRows.length?t.table.deselectRow():t.table.selectRow(t.table.rowManager.getDisplayRows())}),this.table.modules.selectRow.registerHeaderSelectCheckbox(o);return\
    \ o};\n// link formatter remove href\nTabulator.prototype.moduleBindings.format.prototype.formatters.link=function(t,e,a){var\
    \ l=t.getValue(),r=(e.urlPrefix,e.download),i=l,n=document.createElement(\"a\"\
    );if(e.labelField&&(i=t.getData()[e.labelField]),e.label)switch(typeof e.label){case\"\
    string\":i=e.label;break;case\"function\":i=e.label(t)}if(i){if(e.urlField&&(l=t.getData()[e.urlField]),e.url)switch(typeof\
    \ e.url){case\"string\":l=e.url;break;case\"function\":l=e.url(t)}return e.target&&n.setAttribute(\"\
    target\",e.target),e.download&&(r=\"function\"==typeof r?r(t):!0===r?\"\":r,n.setAttribute(\"\
    download\",r)),n.innerHTML=this.emptyToSpace(this.sanitizeHTML(i)),n}return\"\
    &nbsp;\"};\n// datepicker editor\nTabulator.prototype.moduleBindings.edit.prototype.editors.dateEditor=function(t,e,o,n,a){var\
    \ d=document.createElement(\"input\");return d.setAttribute(\"type\",\"date\"\
    ),d.style.padding=\"3px\",d.style.width=\"100%\",d.style.boxSizing=\"border-box\"\
    ,$(d).addClass(\"datepicker\"),d.value=moment(t.getValue(),\"DD/MM/YYYY\").format(\"\
    YYYY-MM-DD\"),e(function(){d.focus(),d.style.css=\"100%\"}),d.addEventListener(\"\
    blur\",function(){d.value?o(moment(d.value,\"YYYY-MM-DD\").format(\"DD/MM/YYYY\"\
    )):n()}),d};\n</script>\n\n<script>\n// patch for deepCloning Skulpt elements\n\
    Tabulator.prototype.helpers.deepClone = function (t) {\n    var e = Array.isArray(t)\
    \ ? [] : {};\n  \tif (t.v !== undefined && t.v.$d !== undefined) {\n      return\
    \ t\n    }\n    for (var o in t){\n        null != t[o] && \"object\" === _typeof(t[o])\
    \ && t[o].v !== undefined?\n        t[o] instanceof Date ?\n        (e[o] = new\
    \ Date(t[o])) :\n        (e[o] = this.deepClone(t[o])) :\n        (e[o] = t[o]);\
    \ \n    }\n    return e;\n};\n    \n</script>\n\n<script>\n// trigger redraw on\
    \ window resize\n$(window).on('resize', function(){\n  $.each(Tabulator.prototype.findTable('.tabulator'),\
    \ function(){\n    this.redraw()\n  })\n});\n  \n  \nfunction find_table(self)\
    \ {\n    table = Tabulator.prototype.findTable(self.v._anvil.element[0])[0];\n\
    \    return table;\n}\n\nfunction create_table(\n    self,\n    auto_columns,\n\
    \    header_align,\n    header_visible,\n    height,\n    index,\n    layout,\n\
    \    moveable_columns,\n    pagination,\n    pagination_button_count,\n    pagination_size,\n\
    \    pagination_size_selector,\n    resizable_columns,\n    row_selectable,\n\
    \    spacing_above,\n    spacing_below,\n) {\n    self = self.v._anvil.element[0];\n\
    \      \n    new Tabulator(self, {\n        autoColumns: auto_columns,\n     \
    \   headerAlign: header_align,\n        headerVisible: header_visible,\n     \
    \   height: height,\n        index: index,\n        //layoutColumnsOnNewData:\
    \ true,\n        layout: layout,\n        moveableColumns: moveable_columns,\n\
    \        pagination: pagination,\n        paginationButtonCount: pagination_button_count,\n\
    \        paginationSize: pagination_size,\n        paginationSizeSelector: pagination_size_selector,\n\
    \        resizableColumns: resizable_columns,\n        selectable: row_selectable,\n\
    \        rowSelected: function (row) {\n            anvil.call(self, \"row_selected\"\
    , row.getData());\n        },\n        rowClick: function (e, row) {\n       \
    \     anvil.call(self, \"row_click\", row.getData());\n        },\n        cellEdited:\
    \ function (cell) {\n            anvil.call(self, \"cell_edited\", cell.getField(),\
    \ cell.getData());\n        },\n        rowSelectionChanged: function (data, rows)\
    \ {\n            anvil.call(self, \"row_selection_change\", data);\n        },\n\
    \        cellClick: function (e, cell) {\n            anvil.call(self, \"cell_click\"\
    , cell.getField(), cell.getData());\n        }\n    });\n      $(self).addClass('anvil-spacing-above-'+spacing_above);\n\
    \      $(self).addClass('anvil-spacing-below-'+spacing_below);\n      \n}\n\n\
    function set_data(self, data) {\n    table = find_table(self);\n    table.setData(data);\n\
    }\n\nfunction get_data(self) {\n    table = find_table(self);\n    data =  table.getData();\n\
    \  \treturn data;\n}\n\nfunction set_columns(self, columns, checkbox_select) {\n\
    \    const table = find_table(self);\n    if (checkbox_select) {\n        columns.unshift({\n\
    \            formatter: \"rowSelectionDisplay\",\n            titleFormatter:\
    \ \"rowSelectionDisplay\",\n            width: 40,\n            align: \"center\"\
    ,\n            headerSort: false,\n            cssClass: 'title-center',\n   \
    \         cellClick: function (e, cell) {\n                cell.getRow().toggleSelect();\n\
    \            }\n        });\n    }\n\tconst Component =  PyDefUtils.getModule('anvil').$d.Component;\n\
    \    const load_component = function (formatter, cell, parameters) {\n       \
    \ // get the row as a python dict\n        let row;\n        // get a kwargs array\
    \ from the paramaters\n        let kwargs = [];\n        Sk.abstr.mappingUnpackIntoKeywordArray(kwargs,\
    \ PyDefUtils.unwrapOrRemapToPy(parameters));\n        if (formatter.superClass_\
    \ && formatter.superClass_.tp$name.includes('Template')) {\n          const item\
    \ = [new Sk.builtin.str(\"item\"), PyDefUtils.unwrapOrRemapToPy(cell.getData())]\n\
    \          kwargs = kwargs.concat(item);\n        } else if (formatter instanceof\
    \ Sk.builtin.method) {\n          row = [PyDefUtils.unwrapOrRemapToPy(cell.getData())];\n\
    \        } else if (formatter instanceof Sk.builtin.func) {\n          row = [PyDefUtils.unwrapOrRemapToPy(cell.getData())];\n\
    \        }\n        let component = Sk.misceval.callsimArray(formatter, row, kwargs);\n\
    \        anvil.call(table.element, 'add_component', component);\n      return\
    \ component;\n    }\n    \n    for (let i = 0; i < columns.length; i++) {\n  \
    \      const c = columns[i]\n        if (typeof c.formatter == 'object' && c.formatter.v\
    \ !== undefined) {\n          \t// then we have an anvil element\n          \t\
    const formatter_component = c.formatter.v;\n          \tc.formatter = function\
    \ (cell, formatterParams, onRendered) {\n            let formatter = load_component(formatter_component,\
    \ cell, formatterParams);\n            return formatter._anvil.element[0];\n \
    \           }\n        }\n\n        if (typeof c.editor == 'object' && c.editor.v\
    \ !== undefined) {\n            // then we have an anvil element\n           \
    \ const editor_component = c.editor.v;\n            c.editor = function (cell,\
    \ onRendered, success, cancel, editorParams) {\n                let component\
    \ = load_component(editor_component, cell, editorParams);\n              \tlet\
    \ editor = component._anvil.element;\n                const blur_cancel = function\
    \ (e) {\n                    if (!e.target.parentElement.classList.contains('anvil-datepicker')\
    \ || (e.relatedTarget && e.relatedTarget.tagName !== 'SELECT')) {\n          \
    \              // hack for datepicker\n                        cancel()\n    \
    \                }\n                }\n                editor[0].addEventListener('blur',\
    \ blur_cancel, true);\n                \n                const close_editor =\
    \ function (kwa) {\n                    cancel()\n                    if (component._anvil.parent)\
    \ {\n                        Sk.abstr.gattr(component, Sk.builtin.str('remove_from_parent')).tp$call([])\n\
    \                    }\n                };\n                close_editor.co_kwargs\
    \ = 1;\n                component._anvil.eventHandlers['x-close-editor'] = new\
    \ Sk.builtin.func(close_editor);\n                \n              \teditor.css('padding',\
    \ '8px');\n\n                onRendered(function () {\n                    //\
    \ focus the first non-div element\n                    editor.find(':not(div)').first().trigger('focus');\n\
    \                });\n                return editor[0];\n            }\n     \
    \   }\n    }\n    table.setColumns(columns);\n}\n\nfunction set_height(self, height)\
    \ {\n    table = find_table(self);\n    table.setHeight(height);\n}\n\nfunction\
    \ set_group_by(self, field) {\n    table = find_table(self);\n    table.setGroupBy(field);\n\
    }\n\nfunction add_row(self, row, top, pos) {\n    table = find_table(self);\n\
    \    table.addRow(row, top, pos);\n}\n\nfunction get_row(self, index) {\n    table\
    \ = find_table(self);\n  \trow = table.getRow(index);\n  \tif (!row) {\n     \
    \ return null;\n    } else {\n      return row.getData();      \n    }\n\n}\n\n\
    function delete_row(self, index) {\n    table = find_table(self);\n    table.deleteRow(index);\n\
    }\n\nfunction update_row(self, index, row) {\n    table = find_table(self);\n\
    \    table.updateRow(index, row);\n}\n\nfunction update_or_add_data(self, data)\
    \ {\n    table = find_table(self);\n    table.updateOrAddData(data);\n}\n\nfunction\
    \ add_data(self, data, top, pos) {\n    table = find_table(self);\n    table.addData(data,\
    \ top, pos);\n}\n\nfunction get_selected(self) {\n    table = find_table(self);\n\
    \    return table.getSelectedData();\n}\n\nfunction set_filter(self, field, type,\
    \ value) {\n    table = find_table(self);\n    table.setFilter(field, type, value);\n\
    }\n\nfunction add_filter(self, field, type, value) {\n    table = find_table(self);\n\
    \    table.addFilter(field, type, value);\n}\n\nfunction remove_filter(self, field,\
    \ type, value) {\n    table = find_table(self);\n    table.removeFilter(field,\
    \ type, value);\n}\n\nfunction get_filters(self) {\n    table = find_table(self);\n\
    \    return table.getFilters();\n}\n\nfunction clear_filter(self, ...args) {\n\
    \    table = find_table(self);\n    table.clearFilter(...args);\n}\n\nfunction\
    \ set_sort(self, ...args) {\n    table = find_table(self);\n    table.setSort(...args);\n\
    }\n\nfunction clear_sort(self) {\n    table = find_table(self);\n    table.getSorters();\n\
    \    table.clearSort();\n    // reset table data\n    table.setData(table.getData());\n\
    }\n\nfunction redraw(self) {\n    table = find_table(self);\n    table.redraw();\n\
    }\n\nfunction replace_data(self, data) {\n    table = find_table(self);\n    table.replaceData(data);\n\
    \  \n}\n\nfunction change_visible(self, value) {\n    table = find_table(self);\n\
    \  \tif (value) {\n      $(table.element).removeClass('visible-false')\n    }\
    \ else {\n      $(table.element).addClass('visible-false')\n    }\n    \n  \n\
    }\n  \n\n  \n</script>\n\n<style>\n  .tabulator.anvil-spacing-below-none{margin-bottom\
    \ : 0px;}\n  .tabulator.anvil-spacing-below-small{margin-bottom : 4px;}\n  .tabulator.anvil-spacing-below-medium{margin-bottom\
    \ : 8px;}\n  .tabulator.anvil-spacing-below-large{margin-bottom : 16px;}\n  .tabulator-cell\
    \ .column-panel, .tabulator-cell input {margin: 0 !important;}\n  .tabulator-cell\
    \ .form-control {padding-top: 0 !important;}\n  .title-center{\n    text-align:\
    \ center !important;\n  }\n  .tabulator-header {border-bottom: none !important}\n\
    \  .tabulator-col-content {border-bottom: 2px solid #ddd}\n</style>"}
db_schema: []
renamed: true
